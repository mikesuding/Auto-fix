<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1544020470</version>
        <name>_Delete_files_if_alert</name>
        <displayedas>_Delete_files_if_alert</displayedas>
        <description>By Mike Suding to run script if specified alert happens</description>
        <collector>script</collector>
        <hasMultiInstances>false</hasMultiInstances>
        <schedule>60</schedule>
        <appliesTo>_Delete_files_if_alert &#38;&#38; isWindows()</appliesTo>
        <wildcardauto>false</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript></wildcardlinuxscript>
        <wildcardlinuxcmdline></wildcardlinuxcmdline>
        <wildcardwinscript></wildcardwinscript>
        <wildcardwincmdline></wildcardwincmdline>
        <wildcardgroovyscript></wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>false</wildcarddeleteinactive>
        <agdmethod>none</agdmethod>
        <agdparams></agdparams>
        <group></group>
        <tags></tags>
        <technology>set property for message_queue.pass
_Delete_files_if_alert &#38;&#38; isWindows()</technology>
        <adlist><![CDATA[{"agdmethod":"none","agdparams":"","id":0,"filters":[],"params":{}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>powerShell</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>$remote_computer = &#39;##system.sysname##&#39;
$this_device_ID  = &#39;##system.deviceId##&#39; #3304 is hyper2 and 3308=mike-PC2
$DataSource_displayname = &#34;Volume Capacity&#34;

$accessId  = &#39;##api.id##&#39; # account info
$accessKey = &#39;##api.key##&#39;
$company   = &#39;##api.company##&#39;

$after_encode_displayname = [uri]::EscapeUriString($DataSource_displayname)
$more_params = &#39;?filter=resourceTemplateName:&#39;+ $after_encode_displayname +&#39;&#38;fields=type,resourceTemplateId,severity,dataPointName,instanceName&#39; #filter and fields
$resourcePath = &#39;/device/devices/&#39; + $this_device_id + &#39;/alerts&#39; # API URL

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 # Use TLS 1.2
$httpVerb = &#39;GET&#39; # request details
$url = &#39;https://&#39; + $company + &#39;.logicmonitor.com/santaba/rest&#39; + $resourcePath + $more_params # Construct URL
$epoch = [Math]::Round((New-TimeSpan -start (Get-Date -Date &#34;1/1/1970&#34;) -end (Get-Date).ToUniversalTime()).TotalMilliseconds) # Get current time in milliseconds
$requestVars = $httpVerb + $epoch + $resourcePath # Concatenate Request Details
$hmac = New-Object System.Security.Cryptography.HMACSHA256 # Construct Signature
$hmac.Key = [Text.Encoding]::UTF8.GetBytes($accessKey)
$signatureBytes = $hmac.ComputeHash([Text.Encoding]::UTF8.GetBytes($requestVars))
$signatureHex = [System.BitConverter]::ToString($signatureBytes) -replace &#39;-&#39;
$signature = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($signatureHex.ToLower()))
$auth = &#39;LMv1 &#39; + $accessId + &#39;:&#39; + $signature + &#39;:&#39; + $epoch # Construct Headers
$headers = New-Object &#34;System.Collections.Generic.Dictionary[[String],[String]]&#34;
$headers.Add(&#34;Authorization&#34;,$auth)
$headers.Add(&#34;Content-Type&#34;,&#39;application/json&#39;)
$response = Invoke-RestMethod -Uri $url -Method Get -Header $headers # Finally make the Request
$status = $response.status # show status and body of response 
$body = $response.data| ConvertTo-Json -Depth 5
Write-Host &#34;_________( Alerts for &#39;volume Capacity&#39; )_______&#34;
Write-Host &#34;Status: $status&#34;
Write-Host &#34;Response: $body&#34;

$qty_of_alerts = $response.data.total
Write-Host &#34;qty_of_alerts=$qty_of_alerts&#34;
if($qty_of_alerts -gt 0) {

    $DataSource_id = $response.data.items.resourceTemplateId
    $DataSource_and_instance_name = $response.data.items.instanceName[0]
    $DataSource_id                = $response.data.items.resourceTemplateId[0]
    Write-Host &#34;dataSource_ID: $DataSource_id&#34;
    write-host &#34;DataSource_and_instance_name: $DataSource_and_instance_name&#34;
    $list_of_alerts = $response.data.items

    Write-host &#34;________( next: now that i have DataSource_ID (92) then get DataSource_name - so I can remove it from instance_name )____&#34;
    $resourcePath = &#39;/setting/datasources/&#39; + $dataSource_ID  # API URL
    $more_params = &#39;?fields=name,displayName&#39; #filter
    $httpVerb = &#39;GET&#39; # request details
    $url = &#39;https://&#39; + $company + &#39;.logicmonitor.com/santaba/rest&#39; + $resourcePath + $more_params # Construct URL
    $epoch = [Math]::Round((New-TimeSpan -start (Get-Date -Date &#34;1/1/1970&#34;) -end (Get-Date).ToUniversalTime()).TotalMilliseconds) # Get current time in milliseconds
    $requestVars = $httpVerb + $epoch + $resourcePath # Concatenate Request Details
    $hmac = New-Object System.Security.Cryptography.HMACSHA256 # Construct Signature
    $hmac.Key = [Text.Encoding]::UTF8.GetBytes($accessKey)
    $signatureBytes = $hmac.ComputeHash([Text.Encoding]::UTF8.GetBytes($requestVars))
    $signatureHex = [System.BitConverter]::ToString($signatureBytes) -replace &#39;-&#39;
    $signature = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($signatureHex.ToLower()))
    $auth = &#39;LMv1 &#39; + $accessId + &#39;:&#39; + $signature + &#39;:&#39; + $epoch # Construct Headers
    $headers = New-Object &#34;System.Collections.Generic.Dictionary[[String],[String]]&#34;
    $headers.Add(&#34;Authorization&#34;,$auth)
    $headers.Add(&#34;Content-Type&#34;,&#39;application/json&#39;)
    $response = Invoke-RestMethod -Uri $url -Method Get -Header $headers # Finally make the Request
    $status = $response.status # show status and body of response 
    $body = $response.data | ConvertTo-Json -Depth 5
    $DataSource_name = $response.data.name

    #$after_cleanup = $DataSource_and_instance_name.Replace($instance_name,&#39;&#39;)
    #Write-Host &#34;after_cleanup:  ~$after_cleanup~&#34;
    Write-Host &#34;Status code: $status&#34;
    Write-Host &#34;Response: $body&#34;
    write-host &#34;DataSource name: $DataSource_name&#34;

    Write-Host &#34;_____( loop thru each alert)________&#34;

    forEach($one_alert in $list_of_alerts) {
        $long_instance_name = &#34;$($one_alert.instanceName)&#34;  # get ONE instance name
        $drive_letter = $long_instance_name.Replace($DataSource_name,&#39;&#39;) # remove the first part which is the name of DataSource to get the drive letter
        write-host &#34;do_action=1&#34;  
        Write-Host $drive_letter
        $my_vars = $drive_letter + &#34;delete-me\*&#34;
        Write-Host $my_vars
        $my_scriptBlock = {
            Remove-Item $using:my_vars -Recurse -Force # note -Recurse and -Force need to be separate not mixed in or have separate variables should be  Remove-item c:\delete-me\* -Recurse -Force
        } #end ScriptBloc
        $result = invoke-command -computername $remote_computer -ScriptBlock $my_scriptBlock
    } # endif ForEach($one_alert
    Write-Host &#34;_____( finished ForEach loop )______&#34;

} else { # if do nothing
    write-host &#34;do_action=0&#34;
    write-host &#34;exit because there are no alerts for device $remote_computer&#34;
} #endif qty_of_alerts

write-host &#34;_____( done )_______&#34;
EXIT</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>do_action</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>regex</postprocessormethod>
            <postprocessorparam>do_action=(\d+)</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr>!= 0 timezone=America/Los_Angeles</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>1=yes,  0=no</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>ms_it_took</name>
            <dataType>4</dataType>
            <type>2</type>
            <postprocessormethod>none</postprocessormethod>
            <postprocessorparam></postprocessorparam>
            <usevalue>responseTime</usevalue>
            <alertexpr>&#62; 55000 timezone=America/Los_Angeles</alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <description>milliseconds it took to run this script. I set alert if it takes &#62;55 seconds</description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        </graphs>
        <overviewgraphs>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
